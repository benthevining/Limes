---
name: Create release

# yamllint disable rule:line-length

on:
    workflow_dispatch:
    push:
        branches:
            - main
    schedule:
        - cron: 0 0 * * 1

defaults:
    run:
        shell: bash

jobs:

    Build:

        name: ${{ matrix.os }} - ${{ matrix.compiler }} - ${{ matrix.cmake_generator }}
        if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
        runs-on: ${{ matrix.os }}
        timeout-minutes: 120
        strategy:
            fail-fast: false
            matrix:
                os: [windows-latest, ubuntu-latest, macos-latest]
                cmake_generator: [Ninja Multi-Config]
                compiler: [GCC, clang]
                include:
                    - os: windows-latest
                      cmake_generator: Visual Studio 17 2022
                      compiler: MSVC
                    - os: macos-latest
                      cmake_generator: Xcode
                      compiler: AppleClang
                exclude:
                    - os: windows-latest
                      cmake_generator: Ninja Multi-Config
                      compiler: GCC

        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  submodules: recursive
                  fetch-depth: 1

            - name: Set up cache
              uses: actions/cache@v3
              with:
                  path: Cache
                  key: ${{ runner.os }}.${{ matrix.cmake_generator }}.${{ matrix.compiler }}.test.${{ hashFiles('**/') }}
                  restore-keys: ${{ runner.os }}.${{ matrix.cmake_generator }}.${{ matrix.compiler }}.test.

            - name: Install Ninja
              if: ${{ matrix.cmake_generator == 'Ninja Multi-Config' }}
              uses: seanmiddleditch/gha-setup-ninja@v3

            # - name: Set up MinGW
            #   if: ${{ runner.os == 'Windows' && matrix.compiler == 'GCC' }}
            #   uses: egor-tensin/setup-mingw@v2
            #   id: setup_MinGW

            - name: Run CMake (GCC)
              if: ${{ matrix.compiler == 'GCC' && runner.os != 'Windows' }}
              run: |
                  CC=gcc-10 CXX=g++-10 cmake --preset default -G '${{ matrix.cmake_generator }}' -D CMAKE_C_COMPILER=gcc-10 -D CMAKE_CXX_COMPILER=g++-10

            # - name: Run CMake (GCC/Windows)
            #   if: ${{ matrix.compiler == 'GCC' && runner.os == 'Windows' }}
            #   run: |
            #       CC='${{ steps.setup_MinGW.outputs.gcc }}' CXX='${{ steps.setup_MinGW.outputs.gxx }}' cmake --preset default -G '${{ matrix.cmake_generator }}' -D CMAKE_C_COMPILER='${{ steps.setup_MinGW.outputs.gcc }}' -D CMAKE_CXX_COMPILER='${{ steps.setup_MinGW.outputs.gxx }}'

            - name: Run CMake (clang)
              if: ${{ matrix.compiler == 'clang' }}
              run: |
                  CC=clang CXX=clang++ cmake --preset default -G '${{ matrix.cmake_generator }}' -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++

            - name: Run CMake (other)
              if: ${{ matrix.compiler != 'GCC' && matrix.compiler != 'clang' }}
              run: cmake --preset default -G '${{ matrix.cmake_generator }}'

            - name: Run debug build
              run: cmake --build --preset default --config Debug

            - name: Run release build
              run: cmake --build --preset default --config Release

            - name: Install debug
              run: cmake --install Builds --config Debug --prefix '${{ github.workspace }}/deploy/debug'

            - name: Install release
              run: cmake --install Builds --config Release --prefix '${{ github.workspace }}/deploy/release'

            - name: Upload debug artefacts
              if: ${{ ! (runner.os == 'macOS' && matrix.compiler == 'clang') }}
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.os }}.${{ matrix.compiler }}.debug
                  path: '${{ github.workspace }}/deploy/debug'
                  if-no-files-found: error

            - name: Upload release artefacts
              if: ${{ ! (runner.os == 'macOS' && matrix.compiler == 'clang') }}
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.os }}.${{ matrix.compiler }}.release
                  path: '${{ github.workspace }}/deploy/release'
                  if-no-files-found: error


    Release:

        name: Create release
        runs-on: ubuntu-latest
        needs: Build

        steps:

            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  submodules: recursive
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3.1.1
              with:
                  node-version: lts/*

            - name: Install dependencies
              run: npm install

            - name: Install dependencies
              run: pip install --upgrade bumpversion

            - name: Download artefacts
              uses: actions/download-artifact@v3
              with:
                  path: '${{ github.workspace }}/deploy'

            - name: Run semantic release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: npx semantic-release
