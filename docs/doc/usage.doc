/** @page using_limes Compiling & using Limes

	@tableofcontents{HTML,LaTeX,XML}

	@section basic_usage Basic usage

	You can run cmake --install and then call find_package (Limes) from your consuming project, and everything should just work out of the box.

	If your project depends on Limes, I recommend copying the \c FindLimes.cmake script from the \c scripts/ directory into your project's source tree (and adding its location to the \c CMAKE_MODULE_PATH before calling find_package (Limes)), so that if your project is built on a system where Limes hasn't been installed, it can still be fetched at configure-time.
	See the FindLimes file for more documentation on what it does.

	@section compilation Compiling Limes

	Limes makes use of C++20, notably concepts.
	Limes has been tested on Mac, Windows, and Linux with Clang, GCC, and MSVC.
	Limes is also tested crosscompiled for iOS, tvOS and watchOS.

	To build the Limes unit tests, pass \c -DLIMES_BUILD_TESTS=ON to the CMake configuration. This option defaults to \c OFF .

	@section cmake CMake information

	Limes aims to be very CMake-aware, and modern CMake design patterns are strictly enforced in Limes CMake code and its primary CMake dependency, <a href="https://github.com/benthevining/Oranges">Oranges</a>.

	The goal of Limes's CMake scripts is to reduce the number of user-facing options, while still retaining flexibility for both users and developers of Limes.

	@subsection cmake_opts Options

	@par LIMES_BUILD_TESTS
	Builds the Limes unit tests. Defaults to \c OFF if Limes is not the top-level directory CMake is invoked in.

	@par LIMES_BUILD_DOCS
	Builds the Limes documentation. Defaults to \c OFF if Limes is not the top-level directory CMake is invoked in.

	@par LIMES_INTERNAL_DOCS
	When building the documentation, includes extra information on internal implementation details not meant for inclusion in the public documentation.
	This option always defaults to \c OFF , and is intended for internal use only.

	@subsubsection cmake_opts_vecops limes_vecops options

	@see limes_vecops

	The limes_vecops library has several additional options controlling its choice of 3rd party backend (if any) to use.

	The default selection of the backend follows these heuristics:
	- Use vDSP if on an Apple platform
	- Use IPP if on an Intel platform and it can be found on the system
	- Use MIPP if on a platform that supports NEON, SSE, AVX, or AVX512
	- Otherwise, use the builtin fallback implementations

	However, these defaults can be overridden using the following CMake options:

	@par LIMES_USE_VDSP
	If \c ON , prefer to use Apple vDSP over any other backend.

	@par LIMES_USE_IPP
	If \c ON , prefer to use Intel IPP over any other backend.

	@par LIMES_USE_MIPP
	If \c ON , prefer to use MIPP over any other backend.

	@par LIMES_USE_VECOPS_FALLBACK
	If \c ON , prefer to use the builtin fallbacks over any third party backend.

	@par LIMES_VECOPS_BACKEND
	A string value that can be one of \c VDSP , \c IPP , \c MIPP , or \c FALLBACK .
	If an unrecognized value is present, a warning will be issued.

	These additional options further control the behavior of the limes_vecops library:

	@par LIMES_USE_POMMIER
	If \c ON , Julien Pommier's sin and cosine functions for SSE and NEON will be used, if on a platform supporting those instructions.
	The main use case of this option is to disable these functions.

	@par LIMES_USE_FFTW
	By default, FFTW will be searched for in the system, and if found, will be used for the limes_vecops FFT class's backend.
	However, you can set this option to \c OFF to ignore FFTW. vDSP and IPP also provide FFT implementations.

	@subsection cmake_deps Dependencies

	Limes's CMake configuration depends on the <a href="https://github.com/benthevining/Oranges">Oranges</a> package of CMake scripts.

	You can set the environment or command-line variable \c ORANGES_PATH to direct the Limes CMake configuration to use a local copy.
	If no local copy is present and Oranges cannot be found on your system, invoking Limes's CMake configuration will fetch and cache a copy of the Oranges source code.

	The limes_vecops library can optionally link to the following external libraries:
	- Apple vDSP (Accelerate framework)
	- Intel IPP
	- MIPP
	- FFTW

	If MIPP is used, its sources will be fetched at configure time if necessary.
	IPP must be manually installed to the system by the developer using Intel's installer program.
	FFTW can be installed to your system with a simple cmake --install of their git repository.

	The Google Protobuf package is required; it is used for serializing Limes objects.

	@subsection cmake_targets Targets

	Limes creates the following CMake targets:

	Name                         | Kind              | Description
	---------------------------- | ----------------- | --------------------------------------------------
	Limes::limes_audio           | Static library    | Limes library of realtime audio utilities
	Limes::limes_core            | Static library    | Limes core library of utilities
	Limes::limes_data_structures | Static library    | Limes library of data structures
	Limes::limes_locale          | Static library    | Limes localization library
	Limes::limes_midi            | Static library    | Limes library of MIDI utilities
	Limes::limes_music           | Static library    | Limes library of music theory utilities
	Limes::limes_vecops          | Static library    | Limes vector operations library
	Limes::Limes                 | Interface library | Links to all Limes libraries and includes limes.h
	Limes::FileUtil              | Executable        | OS-agnostic interface to filesystem operations
	Limes::BinaryBuilder         | Executable        | Generates C++ sources embedding binary data files

	See the documentation for each library and executable for more specific information about each of them.

	@subsection cmake_install Installation

	@subsubsection cmake_install_comps Install components

	Limes creates the following CPack install components and groups:

	Parent component group | Component group       | Component name
	---------------------- | --------------------- | ------------------
	limes_libs             | limes_audio           | limes_audio_dev
	^                      | ^                     | limes_audio_runtime
	^                      | limes_core            | limes_core_dev
	^                      | ^                     | limes_core_runtime
	^                      | limes_data_structures | limes_data_structures_dev
	^                      | ^                     | limes_data_structures_runtime
	^                      | limes_midi            | limes_midi_dev
	^                      | ^                     | limes_midi_runtime
	^                      | limes_music           | limes_music_dev
	^                      | ^                     | limes_music_runtime
	^                      | limes_locale          | limes_locale_dev
	^                      | ^                     | limes_locale_runtime
	^                      | limes_vecops          | limes_vecops_dev
	^                      | ^                     | limes_vecops_runtime
	limes_programs         | limes_binary_builder  | limes_binary_builder_dev
	^                      | ^                     | limes_binary_builder_runtime
	^                      | limes_file_util       | limes_file_util_dev
	^                      | ^                     | limes_file_util_runtime
	--                     | limes_docs            | limes_doc_pdf
	^                      | ^                     | limes_doc_html
	^                      | ^                     | limes_doc_man

	The following aggregate install components are also created:

	Parent component group | Component group
	---------------------- | -----------------
	limes_dev              | limes_libs_dev
	^                      | limes_programs_dev
	limes_runtime          | limes_libs_runtime
	^                      | limes_programs_runtime

	A main aggregate component called \c limes is also created, which installs all Limes components.

	@subsubsection cmake_findpkg_comps Limes find_package components

	When you call \c find_package(Limes) from a consuming project, you can optionally specify any of the following component names:
	- All
	- Libs
	- Programs
	- Audio
	- MIDI
	- Core
	- DataStructures
	- Locale
	- Music
	- Vecops
	- BinaryBuilder
	- FileUtil

	If no component names are specified, Limes will default to importing everything.

	These component names are common to the CMake package files Limes exports, and the \ref find_limes FindLimes.cmake
	script that Limes ships for convenience.

	To read more about this find module, \ref find_limes head here.

	@section limes_docs_build Building the Limes documentation

	The Limes documentation is built with Doxygen. Building the docs can be enabled with the \c LIMES_BUILD_DOCS option.

	Doxygen and Graphviz's dot tool are required for building the docs. A non-fatal warning will be issued during CMake configuration if either program cannot be found.

	To generate the LaTeX PDF output, \c pdflatex and a \c make executable are required. If both can be found, generating the PDF will be automatically enabled.
	The PDF generation can fail spuriously; you can try manually running \c make in the \c doc/latex directory, and press enter if it prompts you about an error.
	On my Mac, I needed to run the following commands to get the LaTeX build working:
	@code
	brew install basictex
	sudo tlmgr install latexmk collection-latexextra wasysym helvetic wasy courier
	brew install gs
	@endcode

	The CMake target that executes the build of the docs is called \c LimesDocs .

 */
