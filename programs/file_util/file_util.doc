/** @page file_util FileUtil
	@brief An OS-agnostic utility providing a wide range of filesystem operations

	@tableofcontents{HTML,LaTeX,XML}

	\c FileUtil is a small command-line program that provides an OS-agnostic interface to common filesystem operations, including emulation of most Unix filesystem commands.

	@section pfu_usage Usage

	@code
	FileUtil <mode> [<args...>]
	@endcode

	where \c <mode> is one one:

	@subsection pfu_absolute absolute
	Convert an input path to an absolute path.
	@code
	FileUtil absolute <path> [<basePath>]
	@endcode
	If \c <path> is an absolute path, prints \c <path> ; otherwise, prints \c <basePath>/<path> .
	If \c <basePath> is not specified, it defaults to the current working directory.

	@subsection pfu_append append
	Append content to a given file.
	@code
	FileUtil append <filename> <content> [--strict]
	@endcode
	Note that the content is given as a single argument.
	If the file did not already exist, then an error will be raised if the \c --strict option was given;
	otherwise, the content will be written to the file as if the \c write command were called.

	@subsection pfu_cat cat
	Concatenate and display contents of the given files.
	@code
	FileUtil cat <filenames...> [--output <outputFile>]
	@endcode
	If \c <outputFile> is specified, the concatenated output will be written to that file;
	otherwise, output is printed to the standard output.

	@subsection pfu_cd cd
	Change the current working directory.
	@code
	FileUtil cd <directory>
	@endcode

	@subsection pfu_copy copy
	Copy files and directories to a new location.
	@code
	FileUtil copy <filesOrDirs...> <destination>
	@endcode
	In this command, the last argument is always the destination.
	If one input file is given, the destination may be a filename.
	If multiple inputs are given, the destination must be a directory.
	If the destination is a directory that doesn't exist, it will be created.

	@subsection pfu_equiv equiv
	Check if two paths are equivalent.
	@code
	FileUtil equiv <path1> <path2> [--error]
	@endcode
	Prints \c yes if the two paths refer to the same filesystem object; otherwise, prints \c no .
	If the \c --error option is given, the result of the comparison is indicated by an exit code of 0 or 1
	instead of printing to standard output.

	@subsection pfu_exists exists
	Check if files and/or directories exist.
	@code
	FileUtil exists <filesOrDirs...> [--error]
	@endcode
	Prints \c yes if every item in the passed list exists; otherwise prints \c no .
	If the \c --error option is given, the result of the comparison is indicated by an exit code of 0 or 1
	instead of printing to standard output.

	@subsection pfu_follow_sym follow_symlink
	Print the target of a symbolic link.
	@code
	FileUtil follow_symlink <symlink> [--no-recurse]
	@endcode
	This command follows the given symlink (and, if it points to another symlink, follows *that* symlink, etc),
	and prints the absolute path of the target to the standard output.
	If the optional \c --no-recurse argument is present, then the recursive behavior is disabled,
	and the path of the passed symlink is printed, even if its target is another symlink.

	@subsection pfu_glob glob
	Find files/directories matching a pattern.
	@code
	FileUtil glob <globbingExpression> [--dir <baseDir>] [--recurse] [--error]
	@endcode
	Prints a list of absolute paths found that match the given globbing expression.
	If the \c <baseDir> option is given, files will be searched for in that directory. Otherwise, it defaults to the current working directory.
	If the \c --error flag is given, the program will exit with an error code if no files are found. Otherwise, 'No files found' will be printed.

	@subsection pfu_hash hash
	Compute a hash of a file's contents.
	@code
	FileUtil hash <hashType> <filename>
	@endcode
	Prints a crypographic hash of a file's contents to standard output.
	Available hash types are: \c md5 , \c sha1 , \c sha224 , \c sha256 , \c sha384 , and \c sha512 .

	@subsection pfu_ln ln
	Create a symbolic link.
	@code
	FileUtil ln <symLinkPath> <symLinkTarget>
	@endcode

	@subsection pfu_ls ls
	List directory contents.
	@code
	FileUtil ls [<directory>]
	@endcode
	The additional \c <directory> argument is optional; if omitted, this command lists the contents of the current working directory.

	@subsection pfu_mkdir mkdir
	Create a directory.
	@code
	FileUtil mkdir <directory>
	@endcode

	@subsection pfu_modtime modtime
	Display the last modification time of a file or directory.
	@code
	FileUtil modtime <fileOrDirectory>
	@endcode
	This command prints the last modification time of the file or directory to standard output in the form `HH:MM:SS Day Month Year`, with the time in 24-hour format and the month as a 3-letter abbreviation; for example, `03:33:52 2 May 2022`.

	@subsection pfu_native native
	Convert a path to the current platform's preferred directory separators.
	@code
	FileUtil native <path>
	@endcode
	Converts any directory separators in \c <path> to the preferred directory separator for the current platform.
	Unlike most other commands, this one does not make the passed path absolute if a relative path was given.

	@subsection pfu_path path
	Prints the contents of the \c PATH environment variable.
	@code
	FileUtil path
	@endcode
	Prints the contents of the \c PATH environment variable as a list of absolute paths to directories, one per line of output.

	@subsection pfu_prepend prepend
	Prepend content to a file.
	@code
	FileUtil prepend <filename> <content> [--strict]
	@endcode
	Note that the content is given as a single argument.
	If the file did not already exist, then an error will be raised if the \c --strict option was given;
	otherwise, the content will be written to the file as if the \c write command were called.

	@subsection pfu_pwd pwd
	Print the absolute path of the current working directory
	@code
	FileUtil pwd
	@endcode

	@subsection pfu_rel relative
	Get a path relative to another location.
	@code
	FileUtil relative <path> [<basePath>]
	@endcode
	If \c <basePath> is not specified, it defaults to the current working directory.

	@subsection pfu_rename rename
	Rename a file or directory.
	@code
	FileUtil rename <oldName> <newName>
	@endcode

	@subsection pfu_rm rm
	Remove files and/or directories.
	@code
	FileUtil rm <filesOrDirs...>
	@endcode

	@subsection pfu_sep sep
	Prints the current platform's preferred directory separator.
	@code
	FileUtil sep
	@endcode

	@subsection pfu_size size
	Prints the size of a file or directory, in bytes.
	@code
	FileUtil size [<fileOrDir>]
	@endcode
	The size is printed to standard output and is represented as bytes.
	If a directory is passed, this command reports the cumulative size of all the directory's contents.
	If no file or directory is specified, this command prints the capacity of the entire filesystem.

	@subsection pfu_space space
	Prints the amount of remaining space on the filesystem, in bytes
	@code
	FileUtil space
	@endcode

	@subsection pfu_touch touch
	Update modification time of files or directories
	@code
	FileUtil touch <filesOrDirs...> [--no-create]
	@endcode
	If the \c --no-create option is specified, files/directories in the input list that don't already exist
	will simply be ignored. Otherwise, they will be created.

	@subsection pfu_type type
	Print the type of a filesystem entry
	@code
	FileUtil type <path>
	@endcode
	If nothing exists at \c <path> , raise an error.
	Otherwise, prints one of \c file , \c directory , or \c symlink describing what exists at the given path.

	@subsection pfu_which which
	Locate an executable.
	@code
	FileUtil which [<programName>]
	@endcode
	Searches for an executable file named \c <programName> in each of the directories in the \c PATH environment variable
	and prints the absolute path of the first match found. If the \c <programName> is omitted, this command
	prints the path of the currently running FileUtil executable itself.

	@subsection pfu_write write
	Write content to a file.
	@code
	FileUtil write <filename> <content> [--no-overwrite]
	@endcode
	Note that the content is given as a single argument.
	If the \c --no-overwrite option is given, then an error is raised if the file already existed;
	otherwise, it will be overwritten.

	@section pfu_cmake CMake information

	@cmaketarget \b Limes::FileUtil
	The @ref file_util "FileUtil"
	executable target.

	@installcomp \b limes_file_util
	@parblock
	Installs the Limes FileUtil program.

	This component is analogous to the `find_package()` component \c FileUtil .
	@endparblock
 */
